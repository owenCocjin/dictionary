#!/bin/bash

## ---------- FUNCTIONS -----------#
function usage(){
	echo -e '''
\e[33mUsage:\e[0m dictionary [-wth] [VALUES] \e[3mWORD\e[0m
\tFind the definition of a word

\e[33mArguments\e[0m:
\t-h, --help\tPrints this screen
\t-w,\t\tSets argument to word to be search. Default usage takes priority over this flag (see examples)
\t-t,\t\tFor testing!
\t-s,\t\tSaves the word in a local dictionary

\e[33mExamples:\e[0m
\tdictionary hot
\tdictionary -w cold hot
\t\t\e[2mIn the above case, hot will be searched\e[0m
\tdictionary -s hot
\tdictionary -w hot -s -t
	'''
	exit 0
}

function error(){
	err="$1"
	if [[ -z "$1" ]]; then
		err="Unknown Error!"
	fi
	echo -e "\e[31;1m[\e[34m|\e[31mX]\e[0m Error: $err"
	exit 1
}


## ------ VARIABLES --------- ##
word=""
local_dict=0
save=0
for lastArg in "$@"; do :; done #Assigns $lastArg the last argument
partOfSpeach=""

## -------- CHECKING FOR DIRECTORIES ---------- ##
if [[ -d /tmp/dictionary ]]; then
	if [[ -f /tmp/dictionary/dict_file ]]; then
		cat /dev/null > /tmp/dictionary/dict_file
	else
		touch /tmp/dictionary/dict_file
	fi
else
	mkdir /tmp/dictionary
	cat /dev/null > /tmp/dictionary/dict_file
fi
dict_file="/tmp/dictionary/dict_file"
direct="/tmp/dictionary/"

## ------- CATCHING FLAGS ------- ##
while getopts ":w:thds" opts; do
	case $opts in
		w)
			if [[ "${OPTARG:0:1}" == '-' ]]; then
				usage
			fi
			word=$OPTARG
		;;
		t)
			direct="./"
			dict_file="./dict_file"
		;;
		s)
			save=1
		;;
		d)
			local_dict=1
		;;
		h|-|*)
			usage
		;;
	esac
done
cd $direct

#If only one argument/first arg doesn't start with '-', assume it was the word
#Alternatively, if no argument is given, throw up usage
#Usage if no word was given
if [[ "$#" == '0' ]]; then
	usage
elif [[ "$#" == '1' ]] && [[ "${1:0:1}" != '-' ]]; then
	word="$1"
elif [[ "${lastArg:0:1}" != '-' ]]; then
	word="$lastArg"
elif [[ -z "$word" ]]; then
	usage
fi

## -------- MAIN -------- ##

#Get the word html
if [[ "$direct" == './' ]]; then
	echo -n "Test detected! Use local files (y/n)?: "
	read rec
	if [[ "$rec" == 'y' ]]; then
		:
	else
		curl -L https://www.merriam-webster.com/dictionary/$word > $dict_file 2>/dev/null
		:
	fi
else
	curl -L https://www.merriam-webster.com/dictionary/$word > $dict_file 2>/dev/null
fi

if [[ "$?" == '6' ]]; then
	error "curl could not resolve host (Check internet connection)"
elif [[ "$?" == '0' ]]; then
	error
else
	:
fi

#Cut out only the relevent tag
#sR==Starting row, eR=Ending row
#sR will waways be 318, but it is decided dynamically just in case the dictionary
#webside changes (This will potentially prevent the scritp from breaking)
sR=$( grep -n 'class="hword"' $dict_file | awk -F':' 'NR==1 { print $1 }' )
awk -v sR="$sR" 'NR>sR {print > "d"}' $dict_file

#Writes the stripped webpage into dict_file
cat d | /home/$USER/.dictionary/dictionary_py/removeTags > $dict_file
partOfSpeach=$( sed '1q;d' $dict_file )
pronunciation=$( sed -e '2q;d' -e 's/[\\]* *//' $dict_file)

echo -e """
\e[1mWord:\e[0m\t\e[5m$word\e[0m
\t\e[2m$pronunciation \\
\t$partOfSpeach\e[0m
\n\e[1mDefinition(s):\e[0m
$( grep '^:' dict_file | awk -F':' 'NR<=5 {print "\t"NR") "$2}' )
"""
