#!/bin/bash

#Author: Owen Cocjin
#Version: 0.3.2
#Update notes:
#	Added proper support of saving words:
# 	When saving a word, user can use either -o flag to retrieve a saved word,
#		or if curl failed to get site, it will try fetching from saved words
#	Fixed error codes
#
#General notes:
#		Exit codes:
#			0=All good!
#			1=General error
#			2=Word not found
#	   	6=Curl couldn't reach host
#			999=Unknown

## ---------- FUNCTIONS ----------- ##
function usage(){
	echo -e '''
\e[33mUsage:\e[0m dictionary [-wth] [VALUES] \e[3mWORD\e[0m
\tFind the definition of a word

\e[33mArguments\e[0m:
\t-h, --help\tPrints this screen
\t-w,\t\tSets argument to word to be search. Default usage takes priority over this flag (see examples)
\t-t,\t\tFor testing!
\t-s,\t\tSaves the word in a local dictionary

\e[33mExamples:\e[0m
\tdictionary hot
\tdictionary -w cold hot
\t\t\e[2mIn the above case, hot will be searched\e[0m
\tdictionary -s hot
\tdictionary -w hot -s -t
	'''
	exit 0
}

function error(){
	err="$1"
	if [[ -z "$1" ]]; then
		err="Unknown Error!"
		2="999"
	fi
	echo -e "\e[31;1m[\e[34m|\e[31mX]\e[0m Error: $err"
	if [[ -z "$3" ]]; then
		if [[ ! -z "$2" ]]; then
			exit $2
		else
			exit 1
		fi
	else
		:
	fi
}

function printWord(){
	#If definitions is empty it's probably because the word couldn't be found, so say so!
	if [[ $( wc -l d | awk '{print $1}') == '0' ]]; then
		echo -e """
		\e[1mWord:\e[0m\t\e[5m$word\e[0m
		\t\e[1m\e[31mWord not found \e[34m:( \e[31m!\e[0m
		"""
	else
		#Print the results all formatted and pretty :D
		word=$( tr '[:lower:]' '[:upper:]' <<< ${word:0:1})$( tr '[:upper:]' '[:lower:]' <<< ${word:1})
		echo -e """
		\e[1mWord:\e[0m\t\e[5m$word\e[0m
		\t\e[2m\\ ${pronunciation} \\
		\t$partOfSpeach\e[0m
		\n\e[1m\tDefinition(s):\e[0m\
		"""
		awk '{print "\t\t"NR") "$0} END {print ""}' d
	fi

}

function findWord(){
	word="$1"
	rec=$( grep -i "${1}:" $utils/saved_words.txt | head -n 1 )
	if [[ ! -z "$rec" ]]; then
		declare $( echo "$rec" | awk -F':' '{
			print "pronunciation="$2
			print "partOfSpeach="$3
		}' )
		echo "$rec" | awk -F':' '{
			printf "" > "d"
			for(i=4; i<NF; ++i)
				print $i >> "d"
		}'
		printWord
		exit 0
	else
		error "Word Not Found!" 2 $2
	fi
}

## ------ SOURCING CONFIG FILE --------- ##
. /etc/dictionary/dict.config

## -------- CHECKING FOR DIRECTORIES ---------- ##
if [[ ! -d /tmp/dictionary ]]; then
	mkdir /tmp/dictionary
	cat /dev/null > /tmp/dictionary/dict_file
fi

#Create dict_file
if [[ -f /tmp/dictionary/dict_file ]]; then
	cat /dev/null > /tmp/dictionary/dict_file
else
	touch /tmp/dictionary/dict_file
fi

#Create d file
if [[ -f /tmp/dictionary/d ]]; then
	cat /dev/null > /tmp/dictionary/d
else
	touch /tmp/dictionary/d
fi

#Create pipe
mkfifo /tmp/dictionary/dict_pipe 2>/dev/null
if [[ "$?" != '0' ]]; then
	:
fi
direct="/tmp/dictionary/"
cd $direct

## ------- CATCHING FLAGS ------- ##
while getopts ":w:hdso" opts; do
	case $opts in
		w)
			if [[ "${OPTARG:0:1}" == '-' ]]; then
				usage
			fi
			word=$OPTARG
		;;
		s)
			save=1
		;;
		d)
			local_dict=1
		;;
		o)
			offLine=1
			if [[ -z "$word" ]]; then
				if [[ "${lastArg:0:1}" != '-' ]]; then
				findWord "$lastArg"
				else
					usage
				fi
			else
				findWord "$word"
			fi
			exit 1
		;;
		h|-|*)
			usage
		;;
	esac
done

#If only one argument/first arg doesn't start with '-', assume it was the word
#Alternatively, if no argument is given, throw up usage
#Usage if no word was given
if [[ "$#" == '0' ]]; then
	usage
elif [[ "$#" == '1' ]] && [[ "${1:0:1}" != '-' ]]; then
	word="$1"
elif [[ "${lastArg:0:1}" != '-' ]]; then
	word="$lastArg"
elif [[ -z "$word" ]]; then
	usage
fi

## -------- MAIN -------- ##
#Uses offline dictionary
#Get the word html
curl -L https://www.merriam-webster.com/dictionary/$word > dict_file 2>/dev/null
if [[ "$?" == '6' ]]; then
	findWord $word 'No'
	error "curl could not resolve host (Check internet connection)" 6
elif [[ "$?" == '0' ]]; then
	error
fi

#Use module to grab word info
/home/$( whoami )/.dictionary/Sites/$site

#Assign the variables
rec=$( cat dict_pipe )
pronunciation=$( echo "$rec" | awk -F':' '{print $1}' )
partOfSpeach=$( echo "$rec" | awk -F':' '{print $2}' )

printWord

#Saves the word and sorts, if -s flag is passed.
#Send sort command into the background to prevent terminal from stalling
if [[ "$save" == '1' ]]; then
	toSave=""
	word=$( tr '[:upper:]' '[:lower:]' <<< ${word} )
	toSave+=$word":"$pronunciation":"$partOfSpeach":"
 	toSave+=$( awk '{printf "%s:",$0} END {print "\n"}' d )
	lineNo=$( grep -n "$word" $utils/saved_words.txt | awk -F':' '{print $1}' )
	testRepeat=$( grep -i "${word}:" $utils/saved_words.txt )
	if [[ lineNo != '' ]] && [[ -z "$testRepeat" ]]; then
		echo "Saving Word..."
		echo $toSave >> /home/$USER/.dictionary/saved_words.txt
		sort -o $utils/saved_words.txt $utils/saved_words.txt &
		echo "Saved!"
	fi
fi
